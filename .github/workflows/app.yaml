name: app test, build and push image to ECR

on:
  push:
    branches:
      - project1

jobs:
  test-python:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

  build-and-push-docker:
    needs: test-python
    
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    env:
      DOCKER_REPOSITORY: krzysztof-homework-app
      IMAGE_TAG: latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR docker repository if it doesn't exist
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ecr describe-repositories --repository-names ${{ env.DOCKER_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.DOCKER_REPOSITORY }}
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $REGISTRY/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push $REGISTRY/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Clear post-build
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: docker rmi $REGISTRY/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}


  build-and-push-helm:
    needs: test-python
    
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./chart

    env:
      HELM_REPOSITORY: homework-app
      HELM_CHART_NAME: homework-app

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}


    - name: Create ECR helm repository if it doesn't exist
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ecr describe-repositories --repository-names ${{ env.HELM_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.HELM_REPOSITORY }}

    - name: Package and push helm chart to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./chart
      run: |
        helm package ${{ env.HELM_CHART_NAME }}
        aws ecr get-login-password --region ${{ secrets.AWS_REGION}} | \
        helm registry login --username AWS --password-stdin $REGISTRY
        helm push ${{ env.HELM_CHART_NAME }}-0.1.0.tgz oci://$REGISTRY

